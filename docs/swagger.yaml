basePath: /api
definitions:
  main.ErrorResponse:
    description: Standard error response format
    properties:
      code:
        description: Optional error code for client handling
        type: string
      message:
        description: Error message describing what went wrong
        type: string
    type: object
  main.Question:
    description: A truth or dare question entry with metadata
    properties:
      id:
        description: |-
          Unique identifier for the question
          @example 1
        type: integer
      language:
        description: |-
          ISO language code of the question
          @example "en"
          @pattern ^[a-z]{2}$
        type: string
      tags:
        description: |-
          Array of associated tag names
          @example ["funny","social","party"]
        items:
          type: string
        type: array
      task:
        description: |-
          The actual question or dare text
          @example "What was your most embarrassing moment?"
          @minLength 3
        type: string
      type:
        description: |-
          Question type, either "truth" or "dare"
          @example "truth"
          @enum "truth" "dare"
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: API Support
    url: https://github.com/2Friendly4You/TruthOrDare
  description: A truth or dare question entry with metadata
  license:
    name: MIT
  title: Truth or Dare API
  version: "1.0"
paths:
  /questions:
    get:
      consumes:
      - application/json
      description: Get a list of truth or dare questions with optional filtering capabilities
      parameters:
      - description: ISO 639-1 language code filter (2 characters)
        example: en
        in: query
        name: language
        type: string
      - description: Question type filter
        enum:
        - truth
        - dare
        in: query
        name: type
        type: string
      - collectionFormat: csv
        description: Filter questions by tags (comma-separated)
        example: funny,party,social
        in: query
        items:
          type: string
        name: tags
        type: array
      - default: false
        description: Require all specified tags to match (true) or any tag (false)
        in: query
        name: matchAllTags
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: List of matching questions
          schema:
            items:
              $ref: '#/definitions/main.Question'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Retrieve questions
      tags:
      - questions
    post:
      consumes:
      - application/json
      description: Creates a new question and its tag associations in a transaction
      parameters:
      - description: Question object to be created
        in: body
        name: q
        required: true
        schema:
          $ref: '#/definitions/main.Question'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created question
          schema:
            $ref: '#/definitions/main.Question'
        "400":
          description: Invalid question data
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Database error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
  /tags:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all available tags that can be used for question
        filtering
      produces:
      - application/json
      responses:
        "200":
          description: List of available tags
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Get available tags
      tags:
      - tags
schemes:
- http
swagger: "2.0"
