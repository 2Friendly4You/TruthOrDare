// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/2Friendly4You/TruthOrDare"
        },
        "license": {
            "name": "MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/questions": {
            "get": {
                "description": "Get a list of truth or dare questions with optional filtering capabilities",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "questions"
                ],
                "summary": "Retrieve questions",
                "parameters": [
                    {
                        "type": "string",
                        "example": "en",
                        "description": "ISO 639-1 language code filter (2 characters)",
                        "name": "language",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "truth",
                            "dare"
                        ],
                        "type": "string",
                        "description": "Question type filter",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "example": "funny,party,social",
                        "description": "Filter questions by tags (comma-separated)",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Require all specified tags to match (true) or any tag (false)",
                        "name": "matchAllTags",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of matching questions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.Question"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new question and its tag associations in a transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Question object to be created",
                        "name": "q",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.Question"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created question",
                        "schema": {
                            "$ref": "#/definitions/main.Question"
                        }
                    },
                    "400": {
                        "description": "Invalid question data",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tags": {
            "get": {
                "description": "Retrieve a list of all available tags that can be used for question filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tags"
                ],
                "summary": "Get available tags",
                "responses": {
                    "200": {
                        "description": "List of available tags",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.ErrorResponse": {
            "description": "Standard error response format",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Optional error code for client handling",
                    "type": "string"
                },
                "message": {
                    "description": "Error message describing what went wrong",
                    "type": "string"
                }
            }
        },
        "main.Question": {
            "description": "A truth or dare question entry with metadata",
            "type": "object",
            "properties": {
                "id": {
                    "description": "Unique identifier for the question\n@example 1",
                    "type": "integer"
                },
                "language": {
                    "description": "ISO language code of the question\n@example \"en\"\n@pattern ^[a-z]{2}$",
                    "type": "string"
                },
                "tags": {
                    "description": "Array of associated tag names\n@example [\"funny\",\"social\",\"party\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "task": {
                    "description": "The actual question or dare text\n@example \"What was your most embarrassing moment?\"\n@minLength 3",
                    "type": "string"
                },
                "type": {
                    "description": "Question type, either \"truth\" or \"dare\"\n@example \"truth\"\n@enum \"truth\" \"dare\"",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{"http"},
	Title:            "Truth or Dare API",
	Description:      "A truth or dare question entry with metadata",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
